type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }

        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 6) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    case 4: initial = "start user hard\n"; break;
                    case 5: initial = "start hard user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard hard\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard easy\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedList;
    import java.util.List;

    public class Board {
        private final List<List<Character>> field;
        protected int SIDE = 3;
        private final List<String> available;
        protected static int numberOfblanks;
        public Board() {
            field = new ArrayList<>();
            available = new LinkedList<>(Arrays.asList("0 0", "0 1", "0 2", "1 0", "1 1", "1 2", "2 0", "2 1", "2 2"));
            for (int i = 0; i < SIDE; ++i) {
                field.add(Arrays.asList(' ', ' ', ' '));
            }
            numberOfblanks = 9;
        }

        public void showBoard() {
            System.out.println("---------");
            for (int i = 0; i < SIDE; i++) {
                System.out.print("| ");
                for (int j = 0; j < SIDE; j++) {
                    System.out.print(field.get(i).get(j) + " ");
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }
        public int[] getIndices(int index) {
            return Arrays.stream(this.available.get(index).split("\\s+")).mapToInt(Integer::parseInt).toArray();
        }

        public int getAvailableMoves() {
            return this.available.size();
        }

        public void removeAvailableMove(int index) {
            this.available.remove(index);
        }
        public void removeAvailableMove(String index) {
            this.available.remove(index);
        }
        public char getSymbol(int i, int j) {
            return this.field.get(i).get(j);
        }
        public void setMove(int i, int j, char symbol) {
            this.field.get(i).set(j,symbol);
        }
        public int[] checkNextMove(boolean isPlayerOne) {
            int[] ret = {-1,-1};
            for (int i = 0; i < SIDE; ++i) {
                for (int j = 0; j < SIDE; ++j) {
                    if (field.get(i).get(j) == ' ') {
                        if (isPlayerOne) {
                            field.get(i).set(j, 'O');
                            int retValue = checkBoard();
                            field.get(i).set(j, ' ');
                            if (retValue == -10) {
                                ret[0] = i;
                                ret[1] = j;
                                return ret;
                            }

                        } else {
                            field.get(i).set(j, 'X');
                            int retValue = checkBoard();
                            field.get(i).set(j, ' ');
                            if (retValue == 10) {
                                ret[0] = i;
                                ret[1] = j;
                                return ret;
                            }
                        }
                    }
                }
            }
            return ret;
        }
        public byte checkBoard() {
            //Check Rows
            for (int i = 0; i < SIDE; i++) {
                if(field.get(i).get(0) == field.get(i).get(1) && field.get(i).get(1)  == field.get(i).get(2)) {
                    if (field.get(i).get(0) != ' ') {
                        if (field.get(i).get(0) == 'X') {
                            return 10;
                        } else {
                            return -10;
                        }
                    }
                }
            }
            //Check Columns
            for (int i = 0; i < SIDE; i++) {
                if(field.get(0).get(i) == field.get(1).get(i) && field.get(1).get(i)  == field.get(2).get(i)) {
                    if (field.get(0).get(i) != ' ') {
                        if (field.get(0).get(i) == 'X') {
                            return 10;
                        } else {
                            return -10;
                        }
                    }
                }
            }
            //Check Diagonals
            if (field.get(0).get(0) == field.get(1).get(1) && field.get(1).get(1) == field.get(2).get(2)) {
                if (field.get(0).get(0) != ' ') {
                    if (field.get(0).get(0) == 'X') {
                        return 10;
                    } else {
                        return -10;
                    }
                }
            } else if (field.get(0).get(2) == field.get(1).get(1) && field.get(1).get(1) == field.get(2).get(0)) {
                if (field.get(0).get(2) != ' ') {
                    if (field.get(0).get(2) == 'X') {
                        return 10;
                    } else {
                        return -10;
                    }
                }
            }
            return 0;
        }
    }
  learner_created: true
- name: src/tictactoe/AI.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class AI implements Player {


        public enum Difficulty {
            EASY, MEDIUM, HARD
        }

        Difficulty level;

        private final char symbol;

        public AI (Difficulty level, char symbol) {
            this.level = level;
            this.symbol = symbol;
        }
        public void randomMove(Board board) {
            Random random = new Random();
            int index = random.nextInt(board.getAvailableMoves());
            int[] indices = board.getIndices(index);
            board.removeAvailableMove(index);
            board.setMove(indices[0], indices[1], this.symbol);
        }


        @Override
        public void move(Board board) {
            if (level.equals(Difficulty.EASY)) {
                System.out.println("Making move level \"easy\"");
                randomMove(board);
            } else if (level.equals(Difficulty.MEDIUM)) {
                System.out.println("Making move level \"medium\"");
                int[] bestMove = board.checkNextMove(this.symbol == 'X');

                if (bestMove[0] != -1){

                    board.setMove(bestMove[0], bestMove[1], this.symbol);
                    board.removeAvailableMove(bestMove[0] + " " + bestMove[1]);
                } else {
                    randomMove(board);
                }
            } else if (level.equals(Difficulty.HARD)) {
                System.out.println("Making move level \"hard\"");
            }
            board.numberOfblanks -= 1;
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    public interface Player {
        public void move(Board board);
    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;

    public class Game {
        private final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        private Board board;


        public boolean endGame() {
            byte res = board.checkBoard();
            if (res != 0) {
                if (board.checkBoard() == 10) {
                    System.out.println("X wins");
                } else {
                    System.out.println("O wins");
                }
                return true;
            } else if (Board.numberOfblanks == 0) {
                System.out.println("Draw");
                return true;
            }
            return false;
        }
        public void play() {
            do {
                System.out.print("Input command: ");
                try {
                    String temp = br.readLine().trim();
                    String[] raw = temp.split("\\s+");
                    if (temp.equalsIgnoreCase("exit")) {
                        br.close();
                        break;
                    }
                    if (raw.length != 3) {
                        throw new Exception("Bad parameters");
                    }

                    Player p1;
                    if (raw[1].equalsIgnoreCase("user")) {
                        p1 = new User('X');
                    } else if (raw[1].equalsIgnoreCase("easy") ||
                            raw[1].equalsIgnoreCase("medium") ||
                            raw[1].equalsIgnoreCase("hard")) {
                        p1 = new AI(AI.Difficulty.valueOf(raw[1].toUpperCase()), 'X');
                    } else {
                        throw new Exception("Bad parameter");
                    }

                    Player p2;
                    if (raw[2].equalsIgnoreCase("user")) {
                        p2 = new User('O');
                    } else if (raw[2].equalsIgnoreCase("easy") ||
                            raw[2].equalsIgnoreCase("medium") ||
                            raw[2].equalsIgnoreCase("hard")) {
                        p2 = new AI(AI.Difficulty.valueOf(raw[2].toUpperCase()), 'O');
                    } else {
                        throw new Exception("Bad parameter");
                    }

                    boolean flag = true;
                    board = new Board();
                    board.showBoard();
                    while (!endGame()) {
                        if (flag) {
                            p1.move(board);
                        } else {
                            p2.move(board);
                        }
                        flag = !flag;
                        board.showBoard();
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            } while (true);
        }
    }
  learner_created: true
- name: src/tictactoe/User.java
  visible: true
  text: |
    package tictactoe;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;

    public class User implements Player {

        static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        private final char symbol;

        public User(char symbol) {
            this.symbol = symbol;
        }

        @Override
        public void move(Board board) {
            boolean flag = false;
            while (!flag) {
                try {
                    System.out.print("Enter the coordinates: ");
                    String[] raw = br.readLine().split("\\s+");
                    int y = Integer.parseInt(raw[0]);
                    int x = Integer.parseInt(raw[1]);

                    if (x > board.SIDE || y > board.SIDE || x == 0 || y == 0) {
                        System.out.println("Coordinates should be from 1 to 3!");

                    } else {
                        x = (x - 3 < 0) ? 3 - x : x - 3;
                        y = y - 1;
                        if (board.getSymbol(x, y) == ' ') {
                            board.setMove(x, y, this.symbol);
                            board.removeAvailableMove(x + " " + y);
                            Board.numberOfblanks -= 1;
                            flag = true;
                        } else {
                            System.out.println("This cell is occupied! Choose another one!");
                        }
                    }

                } catch (IOException e) {
                    System.out.println("Something went wrong there");
                } catch (NumberFormatException e) {
                    System.out.println("You should enter numbers!");
                }

            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/451/implement">JetBrains
    Academy</a>
  time: Sun, 16 Aug 2020 03:15:50 UTC
record: -1
